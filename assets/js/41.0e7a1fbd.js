(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{396:function(v,t,_){"use strict";_.r(t);var a=_(42),r=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"как-это-работает"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#как-это-работает"}},[v._v("#")]),v._v(" Как это работает?")]),v._v(" "),_("h2",{attrs:{id:"украшение-ваших-деиствии"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#украшение-ваших-деиствии"}},[v._v("#")]),v._v(" Украшение ваших действий")]),v._v(" "),_("p",[v._v("Всякий раз, когда Вы используете или регистрируете свое действие как шаблон фреймворка, например контроллер, слушатель и т. д. - Ваше действие никогда не используется напрямую в качестве этих шаблонов. Вместо этого "),_("strong",[v._v("создается новый декоратор, который обертывает и делегирует Ваше действие")]),v._v(".")]),v._v(" "),_("p",[_("img",{attrs:{src:"/how-decorators.png",alt:"Схема декораторов"}})]),v._v(" "),_("p",[v._v("Основная причина этого - обеспечение полного контроля над своим PHP-классом. Нет необходимости расширять класс "),_("code",[v._v("Command")]),v._v("; нет необходимости реализовывать свое действие вокруг запроса API или события; нет необходимости превращать Ваше действие в очередь "),_("code",[v._v("Queueable")]),v._v(", которое должно быть сериализуемым; и т.п.")]),v._v(" "),_("p",[v._v("Вместо этого Вы просто сосредотачиваетесь на написании своего класса так, как Вы хотите, без каких-либо принудительных зависимостей.")]),v._v(" "),_("p",[v._v("Еще одна важная причина декорирования действий - избежать конфликта между узорами. Если Ваше действие напрямую использовалось в качестве контроллера, задания, слушателя и команды, то эти шаблоны неизбежно вступили бы в конфликт друг с другом. Например, у Вас есть мидлвар как для контроллеров, так и для заданий, но это разные типы мидлваров.")]),v._v(" "),_("p",[v._v("Другой пример - как выполняется само действие. Контроллеры создаются один раз и повторно используются для каждого запроса, тогда как слушатели создаются по запросу. С декораторами Вам не о чем беспокоиться. Вы просто пишете свое действие и уверены, что оно будет разрешаться и выполняться каждый раз, независимо от того, в качестве контроллера или как слушателя.")]),v._v(" "),_("h2",{attrs:{id:"определение-того-как-выполняется-деиствие"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#определение-того-как-выполняется-деиствие"}},[v._v("#")]),v._v(" Определение того, как выполняется действие")]),v._v(" "),_("p",[v._v("Теперь Вы знаете, что если действие выполняется как контроллер, оно будет заключено в "),_("code",[v._v("ControllerDecorator")]),v._v(", но как Laravel Actions знает, что оно выполняется как контроллер в первую очередь?")]),v._v(" "),_("p",[v._v("Действия Laravel не расширяют и не переопределяют какие-либо основные компоненты Laravel для идентификации шаблонов. Вместо этого он добавляет перехватчик внутри контейнера IoC, который анализирует "),_("code",[v._v("debug_backtrace")]),v._v(", чтобы определить, как было отправлено действие.")]),v._v(" "),_("p",[v._v("Чтобы убедиться, что перехватчик только перехватывает действия, Laravel Actions использует комбинацию "),_("strong",[v._v("перед разрешением обратных вызовов")]),v._v(" и "),_("strong",[v._v("расширителей")]),v._v(".")]),v._v(" "),_("p",[_("strong",[v._v("До разрешения обратные вызовы")]),v._v(" были введены в Laravel 8.15 и позволяют добавлять обратные вызовы прямо перед тем, как "),_("code",[v._v("abstract")]),v._v(" будет разрешен из контейнера. Если "),_("code",[v._v("abstract")]),v._v(" использует трейт из Laravel Actions, например, "),_("code",[v._v("AsController")]),v._v(", то мы добавляем один расширитель для этого действия. Этот расширитель добавляется не более одного раза за действие.")]),v._v(" "),_("p",[_("strong",[v._v("Расширители")]),v._v(" - это функции обратного вызова, которые позволяют Вам преобразовывать то, что разрешается из контейнера. Расширитель, добавленный Laravel Actions, использует "),_("code",[v._v("debug_backtrace")]),v._v(" для определения того, как было отправлено действие. Если шаблон не был идентифицирован, он просто возвращает само действие, то есть мы используем его как объект. Laravel Actions также использует этот расширитель, чтобы определить, является ли действие имитируемым, и возвращает поддельный экземпляр, если это так.")]),v._v(" "),_("p",[v._v("Обратите внимание, что он определяет шаблоны на основе характеристик, используемых в действии. Например. если в действии не используется трейт "),_("code",[v._v("AsController")]),v._v(", включенный по умолчанию в "),_("code",[v._v("AsAction")]),v._v(", то расширитель не будет пытаться идентифицировать его как контроллер.")]),v._v(" "),_("p",[v._v("На изображении ниже представлена упрощенная диаграмма того, как расширитель влияет на разрешение контейнера.")]),v._v(" "),_("p",[_("img",{attrs:{src:"/how-resolution.png",alt:"Диаграмма разрешения контейнера"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);